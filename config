# ✅ ❌ #

set -eo pipefail

PACKAGES=(
    tar
    make
    cmake
    build-essential
    gcc
    g++
    libstdc++-11-dev
    gcc-multilib
    g++-multilib
)

# Lista moich bibliotek #
LIBS=(
    CORE
)

# echo "${BASH_SOURCE[0]}" # echo "$(dirname "${BASH_SOURCE[0]}")" # echo "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# can be called from any directory -> always gets the WORKING_DIR correct
export DIR_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

export DIR_TARGET="exe"
export DIR_INPUT="input"
export DIR_OUTPUT="output"
export DIR_BUILD="build"
export DIR_EXTERNALS="external"
export DIR_SCRIPTS="scripts"
export DIR_LOG="log"
export DIR_RUN_TIME_CONFIG="run_time_config"

# works only if sourcing is done for every script       #
# otherwise main will set values for every other shell  #
export CALLING_ARGUMENTS="$@"
# ONLY FOR REFERENCE # just use -> "$@"

export PATH_LAST_ARCH_MARKER="$DIR_ROOT/.last_arch_marker"


function silent_come_back() { cd - > /dev/null; };                              export -f silent_come_back
function clear_file() { if [ -f $1 ]; then rm -rf $1; fi; };                    export -f clear_file
function clear_file_nested() { cd $1; clear_file "$2"; silent_come_back; };     export -f clear_file_nested
function clear_dir() { if [ -d $1 ]; then rm -rf $1; fi; mkdir $1; };           export -f clear_dir
function clear_dir_nested() { cd $1; clear_dir "$2"; silent_come_back; };       export -f clear_dir_nested
function create_dir() { if [ ! -d $1 ]; then mkdir $1; fi; };                   export -f create_dir
function create_dir_nested() { cd $1; create_dir "$2"; silent_come_back; };     export -f create_dir_nested
